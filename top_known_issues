MySQL (mysqlserver)

Typical Problems:

Service crash or failure to start.

High memory or CPU usage.

Connection timeout or refusal.

Table corruption or missing tables.

Disk space full on data directory.

Too many connections (max_connections reached).

Slow queries degrading performance.

Realistic Scenarios:

MySQL service has stopped unexpectedly.

MySQL port (3306) is not listening.

Replica lag in case of replication setup.

Specific database table is corrupted.

No space left on /var/lib/mysql.

Memcached (memcache)

Typical Problems:

Service not running.

High memory usage leading to eviction of keys.

Port (11211) not responding.

Cache miss rate too high.

Unable to connect from application.

Realistic Scenarios:

Resolver_agent detects Memcached has stopped.

TTL misconfiguration causes frequent cache expiry.

Firewall blocks access to Memcached port.

Application logs report cache connection timeout.

RabbitMQ (rabbitmqserver)

Typical Problems:

Service not running or crashed.

Connection refused on port 5672.

Queue overflow (too many unprocessed messages).

Node is partitioned in a cluster.

High CPU due to message backlog.

Realistic Scenarios:

Resolver_agent sees queues are stuck or not consumed.

rabbitmq-server process is not running.

Too many unacknowledged messages.

RabbitMQ management UI (port 15672) is down.

Tomcat (tomcatserver)

Typical Problems:

Tomcat not responding or crashed.

Deployment failure of web applications (e.g., .war files).

High CPU or memory usage (OutOfMemoryError).

Application returns HTTP 500/503.

Port 8080 not open or responding.

Realistic Scenarios:

resolver_agent detects HTTP 500s for health endpoint.

Tomcat process is down, and log shows OutOfMemoryError.

WAR deployment stuck or corrupted.

Application log shows JDBC connection error to MySQL.

Nginx (nginxserver)

Typical Problems:

Nginx not running or failed to reload.

Port 80/443 not listening.

Upstream server unreachable (502 Bad Gateway).

Configuration error during reload.

High request latency or dropped connections.

Realistic Scenarios:

resolver_agent detects Nginx reload failed due to config error.

HTTP 502 reported due to Tomcat being unreachable.

Nginx logs show “worker_connections are not enough.”

SSL certificate expired or missing.

Common Infrastructure Problems

Host-only network IP not reachable.

Outdated or missing DNS resolution.

Clock skew between VMs causes SSL or RabbitMQ issues.

Disk full on any VM.

CPU or RAM pressure across VMs.

Example resolver_agent capabilities for these scenarios:

Automatically restart failed services.

Free up disk space or alert on critical usage.

Check and fix corrupted MySQL tables.

Restart Tomcat if it crashes with OutOfMemoryError.

Reload Nginx only if config test passes.

Check RabbitMQ for dead-letter queues and restart consumers.

Log all incidents with timestamps and resolution steps taken.

Here are 10 common issues that we will manually create in our Vagrant-based infrastructure for testing the resolver_agent:

1. MySQL Service Stopped
Create Manually:
sudo systemctl stop mysql

What resolver_agent should do:
Detect service is inactive and restart it using sudo systemctl start mysql.

2. Memcached Port Blocked by Firewall
Create Manually:
sudo iptables -A INPUT -p tcp --dport 11211 -j DROP

What resolver_agent should do:
Detect port 11211 is unreachable and remove firewall rule.

3. RabbitMQ Queue Stuck (Backlog of Messages)
Create Manually:
Stop the consumer or simulate backlog using:
sudo systemctl stop tomcat

What resolver_agent should do:
Identify the growing queue length and restart the consumer (Tomcat).

4. Tomcat OutOfMemory Error
Create Manually:
Deploy a test WAR that leaks memory or limit heap:
export CATALINA_OPTS="-Xmx128m"

What resolver_agent should do:
Detect repeated crashes and restart with increased memory.

5. Nginx Config Error
Create Manually:
Introduce a typo in /etc/nginx/nginx.conf and reload:
sudo nginx -s reload

What resolver_agent should do:
Check config with nginx -t, fix or roll back, then reload.

6. Disk Full
Create Manually:
fallocate -l 950M /tmp/fill.disk
(repeat till / is almost full)

What resolver_agent should do:
Detect low disk space and clean /tmp or log directories.

7. MySQL Table Corruption
Create Manually:
Use MySQL CLI to simulate:
REPAIR TABLE your_table USE_FRM;

What resolver_agent should do:
Check for corrupted tables in logs and auto-repair.

8. Tomcat Not Listening on Port 8080
Create Manually:
Change port in server.xml to a different port or stop Tomcat.

What resolver_agent should do:
Check if port 8080 is open. If not, restart Tomcat and restore config.

9. RabbitMQ Service Stopped
Create Manually:
sudo systemctl stop rabbitmq-server

What resolver_agent should do:
Detect inactive service and start it.

10. Nginx Upstream Failure (502 Bad Gateway)
Create Manually:
Stop Tomcat to break upstream connection.

What resolver_agent should do:
Detect 502 errors in Nginx logs, verify Tomcat, and restart if needed.

Disk space full on data directory
virtual machine is not in connected state.
could not read data from the virtual disk.